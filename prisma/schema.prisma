generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id          String               @id @default(cuid())
  name        String               @unique
  slug        String               @unique
  numberSort  Int                  @map("number_sort")
  description String
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  image       String
  attributes  CategoryAttributes[]
  products    Products[]

  @@map("categories")
}

model CategoryAttributes {
  id                String              @id @default(cuid())
  name              String
  type              AttributeType
  filterable        Boolean             @default(true)
  options           String[]
  categoryId        String              @map("category_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  category          Categories          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productAttributes ProductAttributes[]

  @@map("category_attributes")
}

model Products {
  id               String              @id @default(cuid())
  name             String              @unique
  slug             String              @unique
  description      String
  images           String[]
  stock            Int                 @default(0)
  purchaseCount    Int                 @default(0) @map("purchase_count")
  ordersCount      Int                 @default(0) @map("orders_count")
  price            Float
  oldPrice         Float?              @map("old_price")
  percentageChange Int?                @map("percentage_change")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  updatedPriceAt   DateTime?           @map("updated_price_at")
  categoryId       String              @map("category_id")
  discount         Int                 @default(0)
  favorites        Favorites[]
  orderItems       OrderItems[]
  priceHistory     PriceHistory[]
  attributes       ProductAttributes[]
  category         Categories          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  promoProducts    PromoProducts[]
  reviews          Reviews[]

  @@map("products")
}

model ProductAttributes {
  id                  String             @id @default(cuid())
  value               String
  productId           String             @map("product_id")
  categoryAttributeId String             @map("category_attribute_id")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  title               String
  categoryAttribute   CategoryAttributes @relation(fields: [categoryAttributeId], references: [id], onDelete: Cascade)
  product             Products           @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

model PriceHistory {
  id               String   @id @default(cuid())
  oldPrice         Float    @map("old_price")
  newPrice         Float    @map("new_price")
  percentageChange Int      @map("percentage_change")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  productId        String   @map("product_id")
  priceChange      Float    @map("price_change")
  product          Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model Favorites {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Users {
  id          String      @id @default(cuid())
  firstName   String?     @map("first_name")
  lastName    String?     @map("last_name")
  surName     String?     @map("sur_name")
  email       String      @unique
  phone       String?     @unique
  gender      Gender?
  dateOfBirth DateTime?   @map("date_of_birth")
  password    String
  address     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  role        UserRole    @default(USER)
  favorites   Favorites[]
  orders      Orders[]
  reviews     Reviews[]

  @@map("users")
}

model Orders {
  id                 String               @id @default(cuid())
  publicId           String               @unique @map("public_id")
  total              Float                @default(0)
  status             OrderStatus?
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  userId             String?              @map("user_id")
  quantity           Int                  @default(0)
  completed          Boolean              @default(false)
  userInfoId         String?              @unique @map("user_info_id")
  expectedDate       DateTime?            @map("expected_date")
  completedDate      DateTime?            @map("completed_date")
  discount           Float                @default(0)
  originalTotal      Float                @default(0) @map("original_total")
  type               OrderType
  address            String?              @map("address")
  comment            String?              @map("comment")
  deliveryMethod     OrderDeliveryMethod? @map("delivery_method")
  paymentMethod      OrderPaymentMethod?  @map("payment_method")
  manualDiscount     Float                @default(0) @map("manual_discount")
  percentDiscount    Float                @default(0) @map("percent_discount")
  orderItems         OrderItems[]
  orderStatusHistory OrderStatusHistory[]
  user               Users?               @relation(fields: [userId], references: [id])
  userInfo           UserInfo?            @relation(fields: [userInfoId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String      @map("order_id")
  status    OrderStatus
  changedAt DateTime    @default(now()) @map("changed_at")
  order     Orders      @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model UserInfo {
  id        String  @id @default(cuid())
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  email     String  @map("email")
  phone     String  @map("phone")
  order     Orders?

  @@map("user_info")
}

model OrderItems {
  id                 String   @id @default(cuid())
  orderId            String   @map("order_id")
  productId          String   @map("product_id")
  quantity           Int      @default(1)
  unitPrice          Float?   @map("unit_price")
  totalPrice         Float?   @map("total_price")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  discount           Float?
  totalDiscount      Float?   @map("total_discount")
  originalPrice      Float?   @map("original_price")
  totalOriginalPrice Float?   @map("total_original_price")
  order              Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Reviews {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Banner {
  id              String    @id @default(cuid())
  title           String
  description     String?
  link            String?
  position        Int
  isActive        Boolean   @default(true) @map("is_active")
  imageLG         String    @map("image_lg")
  imageMD         String    @map("image_md")
  imageSM         String    @map("image_sm")
  textColor       String?   @default("#000000") @map("text_color")
  buttonBG        String?   @default("#000000") @map("button_bg")
  buttonTextColor String?   @default("#FFFFFF") @map("button_text_color")
  startDate       DateTime? @map("start_date")
  endDate         DateTime? @map("end_date")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("banners")
}

model Promo {
  id          String          @id @default(cuid())
  title       String
  slug        String          @unique
  description String?
  content     String?
  link        String?
  isActive    Boolean         @default(true) @map("is_active")
  image       String          @map("image")
  startDate   DateTime?       @map("start_date")
  endDate     DateTime?       @map("end_date")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  products    PromoProducts[]

  @@map("promotions")
}

model PromoProducts {
  promoId   String   @map("promo_id")
  productId String   @map("product_id")
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  promo     Promo    @relation(fields: [promoId], references: [id], onDelete: Cascade)

  @@id([promoId, productId])
  @@map("promo_products")
}

model ReviewsInstagram {
  id        String   @id @default(cuid())
  name      String
  nick      String
  image     String
  position  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isActive  Boolean  @default(true) @map("is_active")

  @@map("reviews_instagram")
}

enum AttributeType {
  STRING
  NUMBER
  BOOLEAN
  SELECT
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderType {
  CART
  CHECKOUT
  ORDER
}

enum OrderPaymentMethod {
  TRANSFER
  KASPI
}

enum OrderDeliveryMethod {
  YANDEX
  KAZPOCHTA
}

enum OrderStatus {
  CREATED
  AWAITING_PAYMENT
  PAID
  PROCESSING
  AWAITING_SHIPMENT
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  RETURNED
  AWAITING_RETURN
  RETURN_PROCESSED
}
