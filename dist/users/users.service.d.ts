import { Prisma, UserRole } from '@prisma/client';
import { Response } from 'express';
import { AuthService } from 'src/auth/auth.service';
import { DeleteBulkDto } from 'src/common/dto/delete-bulk';
import { IParamsSort } from 'src/common/types/sort';
import { PrismaService } from 'src/prisma.service';
import { CreateUserByAdminDto } from './dto/create-user-by-admin.dto';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserByAdminDto } from './dto/update-user-by-admin.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { ISortUsers } from './types/sort';
export declare class UsersService {
    private prisma;
    private authService;
    constructor(prisma: PrismaService, authService: AuthService);
    getOne(uniqValue: string, identifier?: 'id' | 'email', includeStatus?: boolean, returnWithPassword?: boolean, adminRole?: UserRole): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
        role: import(".prisma/client").$Enums.UserRole;
    }>;
    getAll(userId?: string, email?: string, firstName?: string, lastName?: string, phone?: string, role?: UserRole, sortBy?: ISortUsers, sort?: IParamsSort, limit?: number, page?: number, adminRole?: UserRole): Promise<{
        page: number;
        limit: number;
        totalCount: number;
        resultCount: number;
        result: any[];
    }>;
    create(dto: CreateUserDto): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
        role: import(".prisma/client").$Enums.UserRole;
    }>;
    createByAdmin(dto: CreateUserByAdminDto, adminRole: UserRole): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
        role: import(".prisma/client").$Enums.UserRole;
    }>;
    update(id: string, dto: UpdateUserDto | UpdateUserByAdminDto, adminRole?: UserRole): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
    } | {
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteUser(id: string, isAdmin: boolean, res?: Response, adminRole?: UserRole): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        password: string;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
        role: import(".prisma/client").$Enums.UserRole;
    }>;
    deleteBulk({ ids }: DeleteBulkDto, adminRole: UserRole): Promise<Prisma.BatchPayload>;
    private validateRole;
    checkUser(uniqValue: string, identifier: 'id' | 'email'): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        surName: string | null;
        email: string;
        phone: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        dateOfBirth: Date | null;
        password: string;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
        role: import(".prisma/client").$Enums.UserRole;
    }>;
}
